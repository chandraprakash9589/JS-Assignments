{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_USERS_SUCCESS, ADD_USER_SUCCESS, UPDATE_USER_SUCCESS, DELETE_USER_SUCCESS, FETCH_POSTS_SUCCESS, FETCH_COMMENTS_SUCCESS } from '../actionsType/actionsType';\nconst initialUserState = {\n  users: []\n};\nconst initialTodoState = {\n  posts: []\n};\nconst initialCommentsState = {\n  comments: []\n};\nexport const userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialUserState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FETCH_USERS_SUCCESS:\n      return {\n        ...state,\n        users: action.payload\n      };\n    case ADD_USER_SUCCESS:\n      return {\n        ...state,\n        users: [...state.users, action.payload]\n      };\n    case UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        users: state.users.map(user => user.id === action.payload.id ? action.payload : user)\n      };\n    case DELETE_USER_SUCCESS:\n      return {\n        ...state,\n        users: state.users.filter(user => user.id !== action.payload)\n      };\n    default:\n      return state;\n  }\n};\nexport const todoReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialTodoState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FETCH_POSTS_SUCCESS:\n      return {\n        ...state,\n        posts: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const commentsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialCommentsState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FETCH_COMMENTS_SUCCESS:\n      return {\n        ...state,\n        comments: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const fetchPosts = userId => {\n  return dispatch => {\n    axios.get(`https://jsonplaceholder.typicode.com/users/${userId}/posts`).then(response => {\n      dispatch({\n        type: FETCH_POSTS_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      console.error('Error fetching posts:', error);\n    });\n  };\n};","map":{"version":3,"names":["axios","FETCH_USERS_SUCCESS","ADD_USER_SUCCESS","UPDATE_USER_SUCCESS","DELETE_USER_SUCCESS","FETCH_POSTS_SUCCESS","FETCH_COMMENTS_SUCCESS","initialUserState","users","initialTodoState","posts","initialCommentsState","comments","userReducer","state","arguments","length","undefined","action","type","payload","map","user","id","filter","todoReducer","commentsReducer","fetchPosts","userId","dispatch","get","then","response","data","catch","error","console"],"sources":["/home/developer/Downloads/Todo_user_list/src/Redux/reducers/reducers.ts"],"sourcesContent":["import { combineReducers } from 'redux';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nimport {\n  FETCH_USERS_SUCCESS,\n  ADD_USER_SUCCESS,\n  UPDATE_USER_SUCCESS,\n  DELETE_USER_SUCCESS,\n  FETCH_POSTS_SUCCESS,\n  FETCH_COMMENTS_SUCCESS,\n} from '../actionsType/actionsType';\n\ninterface User {\n  id: any;\n  name: string;\n  phone: string;\n  email: string;\n  username: string;\n}\n\ninterface UserState {\n  users: User[];\n}\n\ninterface FetchUsersSuccessAction {\n  type: typeof FETCH_USERS_SUCCESS;\n  payload: User[];\n}\n\ninterface AddUserSuccessAction {\n  type: typeof ADD_USER_SUCCESS;\n  payload: User;\n}\n\ninterface UpdateUserSuccessAction {\n  type: typeof UPDATE_USER_SUCCESS;\n  payload: User;\n}\n\ninterface DeleteUserSuccessAction {\n  type: typeof DELETE_USER_SUCCESS;\n  payload: number;\n}\n\ntype UserActionTypes =\n  | FetchUsersSuccessAction\n  | AddUserSuccessAction\n  | UpdateUserSuccessAction\n  | DeleteUserSuccessAction;\n\ninterface Post {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n}\n\ninterface TodoState {\n  posts: Post[];\n}\n\ninterface FetchPostsSuccessAction {\n  type: typeof FETCH_POSTS_SUCCESS;\n  payload: Post[];\n}\n\ntype TodoActionTypes = FetchPostsSuccessAction;\n\ninterface Comment {\n  id: number;\n  postId: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\ninterface CommentsState {\n  comments: Comment[];\n}\n\ninterface FetchCommentsSuccessAction {\n  type: typeof FETCH_COMMENTS_SUCCESS;\n  payload: Comment[];\n}\n\ntype CommentActionTypes = FetchCommentsSuccessAction;\n\nconst initialUserState: UserState = {\n  users: [],\n};\n\nconst initialTodoState: TodoState = {\n  posts: [],\n};\n\nconst initialCommentsState: CommentsState = {\n  comments: [],\n};\n\nexport const userReducer = (state: UserState = initialUserState, action: UserActionTypes): UserState => {\n  switch (action.type) {\n    case FETCH_USERS_SUCCESS:\n      return {\n        ...state,\n        users: action.payload,\n      };\n    case ADD_USER_SUCCESS:\n      return {\n        ...state,\n        users: [...state.users, action.payload],\n      };\n    case UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        users: state.users.map((user) => (user.id === action.payload.id ? action.payload : user)),\n      };\n    case DELETE_USER_SUCCESS:\n      return {\n        ...state,\n        users: state.users.filter((user) => user.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const todoReducer = (state: TodoState = initialTodoState, action: TodoActionTypes): TodoState => {\n  switch (action.type) {\n    case FETCH_POSTS_SUCCESS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const commentsReducer = (state: CommentsState = initialCommentsState, action: CommentActionTypes): CommentsState => {\n  switch (action.type) {\n    case FETCH_COMMENTS_SUCCESS:\n      return {\n        ...state,\n        comments: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n\n\nexport const fetchPosts = (userId: string) => {\n  return (dispatch: any) => {\n    axios\n      .get(`https://jsonplaceholder.typicode.com/users/${userId}/posts`)\n      .then((response) => {\n        dispatch({\n          type: FETCH_POSTS_SUCCESS,\n          payload: response.data,\n        });\n      })\n      .catch((error) => {\n        console.error('Error fetching posts:', error);\n      });\n  };\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}