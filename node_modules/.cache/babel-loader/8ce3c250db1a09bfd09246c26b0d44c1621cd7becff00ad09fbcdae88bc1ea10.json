{"ast":null,"code":"// import { combineReducers } from 'redux';\n// import axios from 'axios';\n// import { Link } from 'react-router-dom';\n\n// import {\n//   FETCH_USERS_SUCCESS,\n//   ADD_USER_SUCCESS,\n//   UPDATE_USER_SUCCESS,\n//   DELETE_USER_SUCCESS,\n//   FETCH_POSTS_SUCCESS,\n//   FETCH_COMMENTS_SUCCESS,\n// } from '../actionsType/actionsType';\n\n// interface User {\n//   id: any;\n//   name: string;\n//   phone: string;\n//   email: string;\n//   username: string;\n// }\n\n// interface UserState {\n//   users: User[];\n// }\n\n// interface FetchUsersSuccessAction {\n//   type: typeof FETCH_USERS_SUCCESS;\n//   payload: User[];\n// }\n\n// interface AddUserSuccessAction {\n//   type: typeof ADD_USER_SUCCESS;\n//   payload: User;\n// }\n\n// interface UpdateUserSuccessAction {\n//   type: typeof UPDATE_USER_SUCCESS;\n//   payload: User;\n// }\n\n// interface DeleteUserSuccessAction {\n//   type: typeof DELETE_USER_SUCCESS;\n//   payload: number;\n// }\n\n// type UserActionTypes =\n//   | FetchUsersSuccessAction\n//   | AddUserSuccessAction\n//   | UpdateUserSuccessAction\n//   | DeleteUserSuccessAction;\n\n// interface Post {\n//   id: number;\n//   userId: number;\n//   title: string;\n//   body: string;\n// }\n\n// interface TodoState {\n//   posts: Post[];\n// }\n\n// interface FetchPostsSuccessAction {\n//   type: typeof FETCH_POSTS_SUCCESS;\n//   payload: Post[];\n// }\n\n// type TodoActionTypes = FetchPostsSuccessAction;\n\n// interface Comment {\n//   id: number;\n//   postId: number;\n//   name: string;\n//   email: string;\n//   body: string;\n// }\n\n// interface CommentsState {\n//   comments: Comment[];\n// }\n\n// interface FetchCommentsSuccessAction {\n//   type: typeof FETCH_COMMENTS_SUCCESS;\n//   payload: Comment[];\n// }\n\n// type CommentActionTypes = FetchCommentsSuccessAction;\n\n// const initialUserState: UserState = {\n//   users: [],\n// };\n\n// const initialTodoState: TodoState = {\n//   posts: [],\n// };\n\n// const initialCommentsState: CommentsState = {\n//   comments: [],\n// };\n\n// export const userReducer = (state: UserState = initialUserState, action: UserActionTypes): UserState => {\n//   switch (action.type) {\n//     case FETCH_USERS_SUCCESS:\n//       return {\n//         ...state,\n//         users: action.payload,\n//       };\n//     case ADD_USER_SUCCESS:\n//       return {\n//         ...state,\n//         users: [...state.users, action.payload],\n//       };\n//     case UPDATE_USER_SUCCESS:\n//       return {\n//         ...state,\n//         users: state.users.map((user) => (user.id === action.payload.id ? action.payload : user)),\n//       };\n//     case DELETE_USER_SUCCESS:\n//       return {\n//         ...state,\n//         users: state.users.filter((user) => user.id !== action.payload),\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export const todoReducer = (state: TodoState = initialTodoState, action: TodoActionTypes): TodoState => {\n//   switch (action.type) {\n//     case FETCH_POSTS_SUCCESS:\n//       return {\n//         ...state,\n//         posts: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export const commentsReducer = (state: CommentsState = initialCommentsState, action: CommentActionTypes): CommentsState => {\n//   switch (action.type) {\n//     case FETCH_COMMENTS_SUCCESS:\n//       return {\n//         ...state,\n//         comments: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export const fetchPosts = (userId: string) => {\n//   return (dispatch: any) => {\n//     axios\n//       .get(`https://jsonplaceholder.typicode.com/users/${userId}/posts`)\n//       .then((response) => {\n//         dispatch({\n//           type: FETCH_POSTS_SUCCESS,\n//           payload: response.data,\n//         });\n//       })\n//       .catch((error) => {\n//         console.error('Error fetching posts:', error);\n//       });\n//   };\n// };\n\nconst initialState = {\n  posts: [],\n  users: [],\n  comments: [],\n  todos: []\n};\nexport const userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'FETCH_USERS_SUCCESS':\n      return {\n        ...state,\n        users: action.payload\n      };\n    case 'CREATE_USER_SUCCESS':\n      return {\n        ...state,\n        users: [...state.users, action.payload]\n      };\n    case 'UPDATE_USER_SUCCESS':\n      const updatedUsers = state.users.map(user => {\n        if (user.id === action.payload.id) {\n          return action.payload;\n        }\n        return user;\n      });\n      return {\n        ...state,\n        users: updatedUsers\n      };\n    default:\n      return state;\n  }\n};\nexport const todoReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'FETCH_TODOS_SUCCESS':\n      return {\n        ...state,\n        todos: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const postReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'FETCH_POSTS_SUCCESS':\n      return {\n        ...state,\n        posts: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const commentReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'FETCH_COMMENTS_SUCCESS':\n      return {\n        ...state,\n        comments: action.payload\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["initialState","posts","users","comments","todos","userReducer","state","arguments","length","undefined","action","type","payload","updatedUsers","map","user","id","todoReducer","postReducer","commentReducer"],"sources":["/home/developer/Downloads/Todo_user_list/src/Redux/reducers/reducers.ts"],"sourcesContent":["// import { combineReducers } from 'redux';\n// import axios from 'axios';\n// import { Link } from 'react-router-dom';\n\n// import {\n//   FETCH_USERS_SUCCESS,\n//   ADD_USER_SUCCESS,\n//   UPDATE_USER_SUCCESS,\n//   DELETE_USER_SUCCESS,\n//   FETCH_POSTS_SUCCESS,\n//   FETCH_COMMENTS_SUCCESS,\n// } from '../actionsType/actionsType';\n\n// interface User {\n//   id: any;\n//   name: string;\n//   phone: string;\n//   email: string;\n//   username: string;\n// }\n\n// interface UserState {\n//   users: User[];\n// }\n\n// interface FetchUsersSuccessAction {\n//   type: typeof FETCH_USERS_SUCCESS;\n//   payload: User[];\n// }\n\n// interface AddUserSuccessAction {\n//   type: typeof ADD_USER_SUCCESS;\n//   payload: User;\n// }\n\n// interface UpdateUserSuccessAction {\n//   type: typeof UPDATE_USER_SUCCESS;\n//   payload: User;\n// }\n\n// interface DeleteUserSuccessAction {\n//   type: typeof DELETE_USER_SUCCESS;\n//   payload: number;\n// }\n\n// type UserActionTypes =\n//   | FetchUsersSuccessAction\n//   | AddUserSuccessAction\n//   | UpdateUserSuccessAction\n//   | DeleteUserSuccessAction;\n\n// interface Post {\n//   id: number;\n//   userId: number;\n//   title: string;\n//   body: string;\n// }\n\n// interface TodoState {\n//   posts: Post[];\n// }\n\n// interface FetchPostsSuccessAction {\n//   type: typeof FETCH_POSTS_SUCCESS;\n//   payload: Post[];\n// }\n\n// type TodoActionTypes = FetchPostsSuccessAction;\n\n// interface Comment {\n//   id: number;\n//   postId: number;\n//   name: string;\n//   email: string;\n//   body: string;\n// }\n\n// interface CommentsState {\n//   comments: Comment[];\n// }\n\n// interface FetchCommentsSuccessAction {\n//   type: typeof FETCH_COMMENTS_SUCCESS;\n//   payload: Comment[];\n// }\n\n// type CommentActionTypes = FetchCommentsSuccessAction;\n\n// const initialUserState: UserState = {\n//   users: [],\n// };\n\n// const initialTodoState: TodoState = {\n//   posts: [],\n// };\n\n// const initialCommentsState: CommentsState = {\n//   comments: [],\n// };\n\n// export const userReducer = (state: UserState = initialUserState, action: UserActionTypes): UserState => {\n//   switch (action.type) {\n//     case FETCH_USERS_SUCCESS:\n//       return {\n//         ...state,\n//         users: action.payload,\n//       };\n//     case ADD_USER_SUCCESS:\n//       return {\n//         ...state,\n//         users: [...state.users, action.payload],\n//       };\n//     case UPDATE_USER_SUCCESS:\n//       return {\n//         ...state,\n//         users: state.users.map((user) => (user.id === action.payload.id ? action.payload : user)),\n//       };\n//     case DELETE_USER_SUCCESS:\n//       return {\n//         ...state,\n//         users: state.users.filter((user) => user.id !== action.payload),\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export const todoReducer = (state: TodoState = initialTodoState, action: TodoActionTypes): TodoState => {\n//   switch (action.type) {\n//     case FETCH_POSTS_SUCCESS:\n//       return {\n//         ...state,\n//         posts: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export const commentsReducer = (state: CommentsState = initialCommentsState, action: CommentActionTypes): CommentsState => {\n//   switch (action.type) {\n//     case FETCH_COMMENTS_SUCCESS:\n//       return {\n//         ...state,\n//         comments: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n\n\n// export const fetchPosts = (userId: string) => {\n//   return (dispatch: any) => {\n//     axios\n//       .get(`https://jsonplaceholder.typicode.com/users/${userId}/posts`)\n//       .then((response) => {\n//         dispatch({\n//           type: FETCH_POSTS_SUCCESS,\n//           payload: response.data,\n//         });\n//       })\n//       .catch((error) => {\n//         console.error('Error fetching posts:', error);\n//       });\n//   };\n// };\n\n\n\n\nconst initialState = {\n  posts:[],\n  users:[],\n  comments: [],\n  todos:[]\n};\n export const userReducer = (state = initialState , action: any) => {\n  switch (action.type) {\n    case 'FETCH_USERS_SUCCESS':\n      return {\n        ...state,\n        users: action.payload,\n      };\n    case 'CREATE_USER_SUCCESS':\n      return {\n        ...state,\n        users: [...state.users, action.payload],\n      };\n    case 'UPDATE_USER_SUCCESS':\n      const updatedUsers = state.users.map((user: any) => {\n        if (user.id === action.payload.id) {\n          return action.payload;\n        }\n        return user;\n      });\n      return {\n        ...state,\n        users: updatedUsers,\n      };\n    default:\n      return state;\n  }\n};\n\n export const todoReducer = (state = initialState , action: any) => {\n  switch (action.type) {\n    case 'FETCH_TODOS_SUCCESS':\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const postReducer = (state = initialState , action: any) => {\n  switch (action.type) {\n    case 'FETCH_POSTS_SUCCESS':\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n export const commentReducer = (state = initialState , action: any) => {\n  switch (action.type) {\n    case 'FETCH_COMMENTS_SUCCESS':\n      return {\n        ...state,\n        comments: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n\n\n\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,MAAMA,YAAY,GAAG;EACnBC,KAAK,EAAC,EAAE;EACRC,KAAK,EAAC,EAAE;EACRC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAC;AACR,CAAC;AACA,OAAO,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAAwC;EAAA,IAAvCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAGU,MAAW,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC7D,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGL,KAAK;QACRJ,KAAK,EAAEQ,MAAM,CAACE;MAChB,CAAC;IACH,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGN,KAAK;QACRJ,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAK,EAAEQ,MAAM,CAACE,OAAO;MACxC,CAAC;IACH,KAAK,qBAAqB;MACxB,MAAMC,YAAY,GAAGP,KAAK,CAACJ,KAAK,CAACY,GAAG,CAAEC,IAAS,IAAK;QAClD,IAAIA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAACI,EAAE,EAAE;UACjC,OAAON,MAAM,CAACE,OAAO;QACvB;QACA,OAAOG,IAAI;MACb,CAAC,CAAC;MACF,OAAO;QACL,GAAGT,KAAK;QACRJ,KAAK,EAAEW;MACT,CAAC;IACH;MACE,OAAOP,KAAK;EAChB;AACF,CAAC;AAEA,OAAO,MAAMW,WAAW,GAAG,SAAAA,CAAA,EAAwC;EAAA,IAAvCX,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAGU,MAAW,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC7D,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGL,KAAK;QACRF,KAAK,EAAEM,MAAM,CAACE;MAChB,CAAC;IACH;MACE,OAAON,KAAK;EAChB;AACF,CAAC;AAED,OAAO,MAAMY,WAAW,GAAG,SAAAA,CAAA,EAAwC;EAAA,IAAvCZ,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAGU,MAAW,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC5D,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGL,KAAK;QACRL,KAAK,EAAES,MAAM,CAACE;MAChB,CAAC;IACH;MACE,OAAON,KAAK;EAChB;AACF,CAAC;AAEA,OAAO,MAAMa,cAAc,GAAG,SAAAA,CAAA,EAAwC;EAAA,IAAvCb,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAGU,MAAW,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAChE,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAK,wBAAwB;MAC3B,OAAO;QACL,GAAGL,KAAK;QACRH,QAAQ,EAAEO,MAAM,CAACE;MACnB,CAAC;IACH;MACE,OAAON,KAAK;EAChB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}